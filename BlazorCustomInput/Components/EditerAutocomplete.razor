@using Microsoft.AspNetCore.Components.Web
@typeparam TVal
@inherits EditerText<TVal>

<input @attributes="AdditionalAttributes"
       class="@CssClass"
       @bind="Value"
       @bind:event="oninput"
       @bind:after="OnInputAsync"
       @onfocusout="OnLostFocusAsync"/>
<br />
@(GetText(Value))
@if (autocomplete is not null && autocomplete.Any())
{
    @foreach (var item in autocomplete)
    {
        @AutocomleteNodes(item)
    }
}

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;
    /// <summary>
    /// オートコンプリートアイテムを表示するコンテンツ
    /// </summary>
    [Parameter]
    public RenderFragment<AutocompleteArg<TVal>> AutocomleteNodes { get; set; } = default!;
    /// <summary>
    /// オートコンプリートのリストを返す
    /// </summary>
    [Parameter]
    public Func<TVal?, IEnumerable<TVal>> GetAutocomleteItems { get; set; } = default!;
    /// <summary>
    /// オートコンプリートが検索開始する文字数
    /// </summary>
    [Parameter]
    public int MinTextLength { get; set; } = 2;
    /// <summary>
    /// TValから文字列を取り出し/生成
    /// </summary>
    [Parameter]
    public Func<TVal?, string> GetText { get; set; } = (x)=>x is string val?val:x?.ToString()??string.Empty;
    /// <summary>
    /// インプットボックスにキーボード入力
    /// </summary>
    [Parameter]
    public EventCallback<KeyboardEventArgs> KeyEventCallback{ get; set; }
    /// <summary>
    /// コンプリート完了したときに呼び出しされる｡
    /// </summary>
    [Parameter]
    public EventCallback CompleteCallBack { get; set; } = default!;
    /// <summary>
    /// オートコンプリートリスト
    /// </summary>
    List<AutocompleteArg<TVal>>? autocomplete { get; set; }

    private string test{ get; set; }
    /// <summary>
    /// 確定
    /// </summary>
    async Task OnLostFocusAsync()
    {
        autocomplete = default;
        if (CompleteCallBack.HasDelegate)
        {
            await CompleteCallBack.InvokeAsync(Value);
        }
    }
    /// <summary>
    /// リストの呼び出し
    /// </summary>
    async Task OnInputAsync()
    {
        if (GetText(Value).Length > MinTextLength && GetAutocomleteItems is not null)
        {
            autocomplete = new();
            autocomplete.Add(new AutocompleteArg<TVal> { IsLoading = true });
            await Task.Run(() =>
            {
                autocomplete.Clear();
                autocomplete = GetAutocomleteItems(Value).
                    Select(t=>new AutocompleteArg<TVal>(){Value=t,IsLoading=false,SelectCallback=EventCallback.Factory.Create<TVal>(this,OnSelectItem)}).
                    ToList();
            });
        }
        else
        {
            autocomplete = default;
        }
    }
    /// <summary>
    /// 選択されたときに呼び出される
    /// </summary>
    /// <param name="value"></param>
    void OnSelectItem(TVal value)=>Value=value;
}
