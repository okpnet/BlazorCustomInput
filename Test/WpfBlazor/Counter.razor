@using WpfBlazor
@using MW.Blazor
@using BlazorCustomInput.Components
<h1>Counter</h1>

@Model.Name
<EditerAutocomplete CompleteCallBack="OnComplete" GetAutocomleteItems="OnSearch" @bind-Value ="Model.Name" >
    <LoadingTemplate>
        <span>Loading</span>
    </LoadingTemplate>
    <AutocompleteFrame>
        <div style="background-color:aqua">
            @foreach(var node in context)
            {
                <p>
                    <a @onclick="node.Selected">@node.Value</a>
                </p>
            }
        </div>
    </AutocompleteFrame>
</EditerAutocomplete>

<button @onclick="OnBtnClickAsync">debug</button>
@code {
    public BindModel Model { get; set; } = new() {Id=5, Name = "hazimete" };
    Microsoft.AspNetCore.Components.Forms.InputText input;
    List<BindModel> tests = new()
    {
        new BindModel{Name="アメリ小田原5",Id=1},
        new BindModel{Name="ハチ公アメリ前5",Id=2},
        new BindModel{Name="日本",Id=3},
        new BindModel{Name="アメリカ5",Id=4},
    };

    protected override async Task OnInitializedAsync()
    {
        // Model = new();
        await base.OnInitializedAsync();
    }

    async Task<IEnumerable<string>> OnSearch(string value)
    {
        await Task.Delay(2000);
        return tests.Where(t => t.Name.Contains(value)).Select(t => t.Name);
    }

    async void OnComplete()
    {
        await Task.Run(() =>
        {
            System.Diagnostics.Debug.WriteLine(Model.Name);
        });

        //System.Diagnostics.Debug.Assert(false);
    }

    async Task OnBtnClickAsync()
    {
        await Task.Run(() =>
        {
            System.Diagnostics.Debug.WriteLine("m "+Model.Name);
        });
    }
}